<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Arron795.github.io</id>
    <title>Arron&apos;s blog</title>
    <updated>2024-06-18T17:27:04.254Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Arron795.github.io"/>
    <link rel="self" href="https://Arron795.github.io/atom.xml"/>
    <subtitle>来自Arron的blog · ❀</subtitle>
    <logo>https://Arron795.github.io/images/avatar.png</logo>
    <icon>https://Arron795.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Arron&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[PCB之路]]></title>
        <id>https://Arron795.github.io/post/LCPCB/</id>
        <link href="https://Arron795.github.io/post/LCPCB/">
        </link>
        <updated>2024-06-17T15:59:46.000Z</updated>
        <content type="html"><![CDATA[<p>​	突发奇想！心血来潮！想从0到1动手做一个板子！小巧又精致的C8T6作为最小系统板，无疑是个不错的选择。继“芯片风波”之后，当前大多数厂商的产品开始相继替换国产的MCU，想着既然做了那就做一个国产MCU的项目吧！</p>
<p>​	兆易创新出品的GD32是目前国内32位单片机的主流替换芯，经了解，GD32F103C8T6的封装与STM32F103C8T6一致，只是芯片主频和Flash等规格上有所不同，物理层面的引脚是完全一致的，可直接替换。</p>
<p>​	网上对GD32F103C8T6的原理图资料较少，嘉立创EDA开源硬件社区上有不少关于STM32F103C8T6的原理图绘制，本着先模仿、再成为、而后超越的想法，参考了多位前辈画的STM32F103C8T6以及部分GD32其他芯片的原理图，最后决定绘制GD32F103C8T6。</p>
<p>​	参考项目：</p>
<ol>
<li><a href="https://oshwhub.com/hzp345/2024-5-10-stm32f103-minimum-system-board">2024-5-10-STM32F103最小系统板 - 嘉立创EDA开源硬件平台 (oshwhub.com)</a></li>
<li><a href="https://oshwhub.com/hao_hao/stm32-zui-xiao-xi-tong-ban">STM32最小系统板-Type-C和MicroUSB版本 - 嘉立创EDA开源硬件平台 (oshwhub.com)</a></li>
<li><a href="https://oshwhub.com/epix/stm32f103c8t6-zui-xiao-xi-tong-ban">stm32f103c8t6最小系统板 - 嘉立创EDA开源硬件平台 (oshwhub.com)</a></li>
<li><a href="https://oshwhub.com/chenjingwu/stm32f103c8t6">STM32F103C8T6最小系统板 - 嘉立创EDA开源硬件平台 (oshwhub.com)</a></li>
<li><a href="https://oshwhub.com/li-chuang-kai-fa-ban/li-chuang-gd32e230-zui-xiao-xi-tong-ban">立创·GD32E230最小系统板 - 嘉立创EDA开源硬件平台 (oshwhub.com)</a></li>
</ol>
<p>​    GD32F103C8T6 原理图：</p>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1718643668448.png" alt="" loading="lazy"></figure>
<p>​    GD32F103C8T6 PCB Layout：</p>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1718643699756.png" alt="" loading="lazy"></figure>
<p>​    GD32F103C8T6 预览图：</p>
<figure data-type="image" tabindex="3"><img src="https://Arron795.github.io/post-images/1718697982302.png" alt="" loading="lazy"></figure>
<p>​	在此之前，4月份时接触过一点PCB绘制，当时在做毕设，看着我的主控和传感器直接连接了一堆的杜邦线，很是难看，有没有什么方法可以摒弃大量的杜邦线让系统看起来更简洁呢？考虑过用面包板和短线连接，虽然不会耷拉着一堆传感器，但本质还是杜邦线。于是萌生了做个PCB集成一下电路的想法，便开始了原理图首次绘制。</p>
<p>​    智慧花园项目板原理图：</p>
<figure data-type="image" tabindex="4"><img src="https://Arron795.github.io/post-images/1718697950642.png" alt="" loading="lazy"></figure>
<p>​    智慧花园项目板 PCB Layout：</p>
<figure data-type="image" tabindex="5"><img src="https://Arron795.github.io/post-images/1718697955356.png" alt="" loading="lazy"></figure>
<p>​   智慧花园项目板预览图：</p>
<figure data-type="image" tabindex="6"><img src="https://Arron795.github.io/post-images/1718710214091.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ T113-Pro的buildroot添加gdisk ( GPT disks )出现***gptfdisk needs a toolchain w/ C++***的解决方法]]></title>
        <id>https://Arron795.github.io/post/t113pro-buildroot-gdisk/</id>
        <link href="https://Arron795.github.io/post/t113pro-buildroot-gdisk/">
        </link>
        <updated>2024-02-02T15:35:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="问题背景">问题背景：</h3>
<p>​   最近入手了百问网的全志T113-Pro，用Emmc启动发现一张32GB的SD卡在烧录了百问网镜像 100ask-t113-pro_sdcard.img 的系统后，仅有200多M的存储空间。第一时间上百问网论坛看是否有板友也出现类似情况，发现了一个帖子正是描述这种情况的。</p>
<blockquote>
<p>百问网论坛相关帖子地址：<a href="https://forums.100ask.net/t/topic/1646/4">文件系统打包烧写到sd卡，没有完全利用sd卡的全部空间 - Allwinner / T113_PRO - 嵌入式开发问答社区 (100ask.net)</a></p>
</blockquote>
<p>*（<em>这里做一个说明，百问网对全志T113-Pro给了两个镜像，一个是含lvgl的 100ask-t113-pro-lvgl_sdcard.img ，有屏幕的话可以看到开机自启动的lvgl画面，并且可以在/etc/init.d里找到S50lvgl-desktop可执行程序；一个是不含lvgl的 100ask-t113-pro_sdcard.img  ，这两个在空间上相差仅有20多M，前者多70M，后者50多M，注意甄别。）</em></p>
<pre><code>后来查T113-Pro相关资料，在CSDN意外发现正好有解决该问题的文章。跟着板友学习了一下，在buildroot添加gdisk过程中遇到了一些问题，这里做一个补充，方便后来的板友参考。
</code></pre>
<blockquote>
<p>CSDN文章地址：<a href="https://blog.csdn.net/qq_62815119/article/details/129182940?spm=1001.2014.3001.5502">【全志T113-S3_100ask】SD卡扩容_系统烧录在sd卡中后怎么扩容-CSDN博客</a></p>
</blockquote>
<p>buildroot添加gdisk ( GPT disks )步骤可能会遇到的问题：</p>
<ul>
<li>gptfdisk无法勾选，显示*** gptfdisk needs a toolchain w/ C++ ***</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1706888188919.png" alt="" loading="lazy"></figure>
<h3 id="解决方法">解决方法：</h3>
<pre><code>    在buildroot目录下输入make menuconfig 进入配置模式，选中Toolchain  ---&gt; 回车进入。
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1706888209994.png" alt="" loading="lazy"></figure>
<pre><code>    确认一下编译用的C库用的是哪个库。
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://Arron795.github.io/post-images/1706888222985.png" alt="" loading="lazy"></figure>
<pre><code>    一般选择uClibc-ng和glibc任意一个即可。（回车选择）
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://Arron795.github.io/post-images/1706888228336.png" alt="" loading="lazy"></figure>
<pre><code>    回车后自动回到Toolchain，往下找到Enable C++ support，按Y勾选，保存退出。
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://Arron795.github.io/post-images/1706888362026.png" alt="" loading="lazy"></figure>
<pre><code>    随后即可在
        Target packages  ---&gt; 
</code></pre>
<p>​	            Hardware handling  ---&gt;</p>
<pre><code>    下选择是否勾选gptfdisk，按Y勾选，保存退出。
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://Arron795.github.io/post-images/1706888265014.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[以STM32F103C8T6为主控实现的RFID感应宿舍门锁开关]]></title>
        <id>https://Arron795.github.io/post/dormlock/</id>
        <link href="https://Arron795.github.io/post/dormlock/">
        </link>
        <updated>2024-01-15T16:26:07.000Z</updated>
        <content type="html"><![CDATA[<h4 id="为什么做这个东西">为什么做这个东西？</h4>
<p>​   上个月月末闲来无事上bilibili搜索物联网相关的设计，偶然间看到一个用C8T6 + RFID感应模块 + 舵机实现的小玩意，具体过程是IC卡或者手机NFC区（需复制IC卡后）贴近RFID感应区，C8T6检测到有卡靠近，控制舵机旋转，通过绳索拉动门把手，实现刷卡（手机）入室。觉得这小玩意挺有意思的，并且舍友有时会忘记带钥匙，再加上正好当复习STM32开发流程了，看看能否温故而知新。</p>
<h4 id="需求分析">需求分析：</h4>
<ol>
<li>​	由于该项目用到的外设并没有很多，芯片性能需求不大，所以主控选择的是STM32C8T6F103最小系统板；</li>
<li>​	项目需要能检测IC卡，感应模块选择网上随便都能买到的 RFID-RC522 ；</li>
<li>​	项目需要能开门，拉动门把手是最容易的开门方式，舵机拉动是不错的选择，常见的SG90即可。</li>
<li>​	一般来说，拥有以上三种物料即可简单实现。但是为了更加人性化和合理化，我另外添加了两种物料：
<ul>
<li>一个是蜂鸣器， 用于系统检测到IC卡开门时触发声响，方便用户知道当前系统是否成功检测到IC卡并开门，避免无效刷卡进门失败和错过有效进门时机。当检测到正确卡号，响鸣0.5s；当检测到错误卡号，则间隔响鸣0.01秒，直至移开IC卡响鸣停止。</li>
<li>一个是按键，用于触发中断，唤醒芯片。</li>
</ul>
</li>
</ol>
<p>​		为什么要唤醒？因为设计之初是打算用移动电源供电，考虑到系统需要长时间供电，如果让单片机长时间无休止地运行，耗电是必然的。（即使比起电脑电视等设备，单片机耗的这点电不算什么，但毕竟是嵌入式，低功耗是嵌入式的特点）</p>
<p>​		而用户有开门需求的时机并不是长期的，单片机运作时大多数时间都是在等待用户刷卡，真正有效的运作仅有在需要开门的那几秒，那么这样看来，单片机长时间的耗电运作等待用户的到来似乎没有必要。为了避免让单片机长时间的耗电等待，是否有一种方案能让单片机在等待用户到来这段时间里是处于休眠停止的状态，等用户到来了，再唤醒工作呢？我在 STM32F103x8B 的 datasheet 里找到了答案。STM32F103C8T6 芯片设计了三种低功耗模式（详见 STM32F103x8 数据手册 <em>“2.3.12 低功耗模式”</em> ），睡眠模式是其中一种解决思路。</p>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1705336850557.png" alt="" loading="lazy"></figure>
<h4 id="解决方案">解决方案：</h4>
<p>​	datasheet中提到，进入低功耗模式的芯片，可用中断唤醒。于是我的想法是让系统进入睡眠模式，用一个按键作为外部中断EXTI，当用户到来，按下按键触发中断，唤醒系统。此时系统检测是否有卡贴近，当有，驱动舵机开门；当无，在一段循环等待后再次进入睡眠模式。</p>
<h4 id="物料选型">物料选型：</h4>
<ul>
<li>​	主控：STM32F103C8T6</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1705336281293.webp" alt="" loading="lazy"></figure>
<ul>
<li>​	感应模块：RFID-RC522</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://Arron795.github.io/post-images/1705337287364.jpg" alt="" loading="lazy"></figure>
<ul>
<li>​	舵机：SG90</li>
</ul>
<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fcbu01.alicdn.com%2Fimg%2Fibank%2F2015%2F017%2F979%2F2642979710_1200542799.jpg&refer=http%3A%2F%2Fcbu01.alicdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1707980471&t=a3a02d095b9c108015c6855f282a5b4f" alt="img" style="zoom:25%;" />
<ul>
<li>​	*有源蜂鸣器：用于开门时作提示音</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://Arron795.github.io/post-images/1705337158668.jpg" alt="" loading="lazy"></figure>
<ul>
<li>​	*按键：从鼠标按键上拆下来的小按键</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://Arron795.github.io/post-images/1705337101370.png" alt="" loading="lazy"></figure>
<ul>
<li>杜邦线若干：公对母或者母对母，根据自己需求选择</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://Arron795.github.io/post-images/1705337321938.jpg" alt="" loading="lazy"></figure>
<ul>
<li>
<p>电源：</p>
<p>​	电源方案有两种，任选其一即可。考虑到用移动电源会有电源用完，需要拆下电源给其充电的情况，加之对移动电源也是一种损耗，我最终选择的是方案一。</p>
<ul>
<li>
<p>方案一：</p>
<ul>
<li>
<p>5V 1A USB充电头 	1个；</p>
</li>
<li>
<p>5米USB 3.0 公母延长线     1条 （*必须要3.0，2.0不行，尽量挑导线材质好一些的，导线材质差有可能经过长距离的传输，电压到达末端时会有电压损耗，具体长度需求根据实际情况购买）；</p>
</li>
<li>
<p>MicroUSB 充电线     1条；</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>方案二：</p>
<ul>
<li>
<p>移动电源     1个；</p>
</li>
<li>
<p>MicroUSB 充电线     1条；</p>
</li>
</ul>
</li>
</ul>
<h6 id="这里对电源方案的选择做一个分析仅供参考">这里对电源方案的选择做一个分析，仅供参考。</h6>
<p>​	根据 STM32F103x8 的数据手册第 5.3.5 节 <em>供电电流特性</em>	提到，在 <em><strong>最大电流消耗</strong></em> 的<strong>运行模式下，使能所有外部时钟，72MHz（最大频率），85℃</strong> 的情况下，电流消耗在50mA。而<strong>关闭所有外设</strong>后，仅在32.8mA。</p>
</li>
</ul>
<figure data-type="image" tabindex="7"><img src="https://Arron795.github.io/post-images/1705336649685.png" alt="" loading="lazy"></figure>
<p>​	在<strong>睡眠模式下，使能所有外部时钟，72MHz（最大频率），85℃</strong> 的情况下，电流消耗在30mh。<strong>关闭所有外设</strong>后，仅有7.5mA。</p>
<figure data-type="image" tabindex="8"><img src="https://Arron795.github.io/post-images/1705336664857.png" alt="" loading="lazy"></figure>
<blockquote>
<p>从上述两图总结得出，在其他条件同等，睡眠模式下可有效降低耗电，若同时关闭不必的外设，可以更进一步地降低耗电。</p>
</blockquote>
<p>​	在 <em><strong>典型电流消耗</strong></em>  的<strong>运行模式，使能所有外设，85℃，72MHz</strong>的情况下，电流消耗在40mA上下。</p>
<figure data-type="image" tabindex="9"><img src="https://Arron795.github.io/post-images/1705336672709.png" alt="" loading="lazy"></figure>
<p>​	在 <em><strong>典型电流消耗</strong></em>  的<strong>运行模式，关闭所有外设，85℃，72MHz</strong>的情况下，电流消耗在25mA上下。</p>
<figure data-type="image" tabindex="10"><img src="https://Arron795.github.io/post-images/1705336687217.png" alt="" loading="lazy"></figure>
<p>​	假设系统以<strong>最大功耗运行（运行模式下，使能所有外部时钟，72MHz），此时50mA的电流消耗，供电电压3.6V</strong>，那么一个小时会消耗0.18度电。一个5000mA的移动电源可供其约138个小时。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">电</mi><mi mathvariant="normal">能</mi><mi mathvariant="normal">（</mi><mi>k</mi><mi>W</mi><mi>h</mi><mi mathvariant="normal">）</mi><mo>=</mo><mn>0.05</mn><mi>A</mi><mo>×</mo><mn>3.6</mn><mi>V</mi><mo>×</mo><mn>1</mn><mi>h</mi><mo>=</mo><mn>0.18</mn><mi>k</mi><mi>W</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">电能（kWh）=0.05A×3.6V×1h=0.18kWh
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">h</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">8</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">h</span></span></span></span></span></p>
<p>​	再假设系统以<strong>睡眠模式下，72MHz，供电电压3.6V</strong>，此时电流消耗在7.5mA ~ 30mA之间（关闭所有外设 和 使能所有外设），系统用到的外设功能并不多，仅有一个SPI、一个PWM以及若干GPIO，大胆估设电流消耗为15mA，那么一个小时仅消耗0.054度电。一个5000mA的移动电源可供其462个小时左右，有效地降低了电耗。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">电</mi><mi mathvariant="normal">能</mi><mi mathvariant="normal">（</mi><mi>k</mi><mi>W</mi><mi>h</mi><mi mathvariant="normal">）</mi><mo>=</mo><mn>0.015</mn><mi>A</mi><mo>×</mo><mn>3.6</mn><mi>V</mi><mo>×</mo><mn>1</mn><mi>h</mi><mo>=</mo><mn>0.054</mn><mi>k</mi><mi>W</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">电能（kWh）=0.015A×3.6V×1h=0.054kWh
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">h</span><span class="mord cjk_fallback">）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">5</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">5</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord mathdefault">h</span></span></span></span></span></p>
<h4 id="硬件连接图">硬件连接图：</h4>
<p>​	*因实际部署时，板上的3.3V和GND口不足，且蜂鸣器位置较为特殊，故把蜂鸣器接在SWD调试口的源地接口。实际操作可根据自己的需求灵活接线。</p>
<figure data-type="image" tabindex="11"><img src="https://Arron795.github.io/post-images/1705389232655.jpg" alt="" loading="lazy"></figure>
<h4 id="实物图">实物图：</h4>
<figure data-type="image" tabindex="12"><img src="https://Arron795.github.io/post-images/1705337583340.jpg" alt="" loading="lazy"></figure>
<h4 id="部署效果">部署效果：</h4>
<figure data-type="image" tabindex="13"><img src="https://Arron795.github.io/post-images/1705337807389.gif" alt="" loading="lazy"></figure>
<blockquote>
<h5 id="代码链接httpsgithubcomarron795dormlock">代码链接🔗：https://github.com/Arron795/DormLock</h5>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[虚拟机如何在主机可以访问外网的情况下也访问外网]]></title>
        <id>https://Arron795.github.io/post/clash/</id>
        <link href="https://Arron795.github.io/post/clash/">
        </link>
        <updated>2024-01-12T17:51:19.000Z</updated>
        <summary type="html"><![CDATA[<h5 id="为什么写这篇文章">为什么写这篇文章？</h5>
]]></summary>
        <content type="html"><![CDATA[<h5 id="为什么写这篇文章">为什么写这篇文章？</h5>
<!-- more -->
<p>​	最近在学习Raspberry Pi Pico的相关内容，Pico是支持MicroPython SDK和 C++ SDK 的。用MicroPython官方推荐的IDE是Thonny，但我用它写代码觉得很难受，智能提示和补全用起来不是很顺手。我在想要不用VS code + 拓展试试？还真在网上找到了相关的文章，用的是VS code + Python + MicroPico拓展。</p>
<p>​	在查找相关文章之时，发现了一篇用Raspberry Pi Pico官方C++ SDK + Linux +  cmake 的环境配置教程，开发方式是 Windows下用 VS code 写代码，远程连接Ubuntu虚拟机，在虚拟机下用 gcc 编译 + make构建生成.uf2文件，再将.uf2文件传输到Windows主机并拖拽至RPI-RP2存储设备（即Pico板）实现开发。<br>
​	教程链接：<a href="https://zhuanlan.zhihu.com/p/676745807">轻松玩转树莓派Pico一、树莓派pico新手上路 - 知乎 (zhihu.com)</a></p>
<p>​	在Ubuntu用 git 克隆Raspberry Pi官方的Pico SDK时要么特别慢要么会显示拒绝连接，加之有时克隆的项目会出现部分文件缺失。个人猜测是在国内访问GitHub站点不稳定所致。</p>
<p>​	对个人而言，最好的解决办法就是挂VPN。我在Windows下用的是Clash for windows，最简单的方式就是在Ubuntu也下一个Clash。个人认为，这也是一种解决方式，但一定不是最合理的。那有没有一种方法，让**Windows主机用Clash能够访问外网的同时，让虚拟机也能访问到外网呢？**答案是肯定的。</p>
<h5 id="解决方法">解决方法：</h5>
<p>​	在和ChatGPT“磨合”了一会后，摸索出了一套方案。首先，你得具有一些必要的软件或环境。</p>
<ul>
<li>主机系统：Windows 11</li>
<li>代理软件：Clash for windows</li>
<li>虚拟机软件：VM wave 14</li>
<li>虚拟机系统：Ubuntu 18.04 LTS（Linux）</li>
</ul>
<ol>
<li>
<p>打开VM wave 点击编辑 → 虚拟机网络编辑器。<br>
<img src="https://Arron795.github.io/post-images/1705082434809.png" alt="" loading="lazy"></p>
</li>
<li>
<p>点击右下角的更改设置，需要用管理员身份运行。<br>
<img src="https://Arron795.github.io/post-images/1705082623391.png" alt="" loading="lazy"></p>
</li>
<li>
<p>添加一个网络，选择桥接模式，我电脑和路由器是无线连接的，所以选择Wi-Fi驱动设备，若是用网线连接，选择相应的驱动设备即可。修改完成后，<strong>先点击应用，再点击确定</strong>。<br>
<img src="https://Arron795.github.io/post-images/1705082639343.png" alt="" loading="lazy"></p>
</li>
<li>
<p>在Windows下按 Win + R  输入cmd或者powershell，点击确定。<br>
<img src="https://Arron795.github.io/post-images/1705082665497.png" alt="" loading="lazy"></p>
<p>在命令行输入ipconfig，查看Windows本地IP。<br>
<img src="https://Arron795.github.io/post-images/1705082755537.png" alt="" loading="lazy"></p>
</li>
<li>
<p>登录Ubuntu系统，在命令行输入ifconfig查看本地IP地址，并尝试Ping主机。<br>
<strong>主机和虚拟机相互Ping通是必须的。</strong><br>
<img src="https://Arron795.github.io/post-images/1705082766315.png" alt="" loading="lazy"></p>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1705083065408.jpg" alt="" loading="lazy"></figure>
<ol>
<li>
<p>在命令行输入gedit .bashrc（若没有安装gedit工具，则用 vi .bashrc 或 vim .bashrc）。</p>
<pre><code>sudo gedit .bashrc
</code></pre>
<p>在 .bashrc 文件中添加以下两行。</p>
<pre><code>export http_proxy=http://Windows主机IP:Clash代理端口
export https_proxy=http://Windows主机IP:Clash代理端口
</code></pre>
</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1705082791067.png" alt="" loading="lazy"></figure>
<p>IP是用Windows主机的IP，端口号可以在Clash查看。<br>
<img src="https://Arron795.github.io/post-images/1705082800707.png" alt="" loading="lazy"></p>
<p>编辑完 .bashrc 后，Ctrl + S 保存退出。（必要的话可以尝试重启系统，用命令reboot即可重启）</p>
<ol>
<li>勾选Clash中的必要选项。（Clash for Windows的使用我不在这里赘述，详细使用教程可上网搜索查得。）<br>
Allow LAN选项是允许同一网段下的网络绑定，此前我已将 Windows 主机和 Ubuntu 虚拟机已经配置到了同一网段下；System Proxy是开启代理。</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://Arron795.github.io/post-images/1705082823921.png" alt="" loading="lazy"></figure>
<ol>
<li>至此，你的虚拟机便可与主机通过桥接模式访问外网。访问外网和在Github拉取文件更加稳定。<br>
虚拟机下访问YouTube：<br>
<img src="https://Arron795.github.io/post-images/1705082829130.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于如何将Android手机中PSP游戏运行在PC端]]></title>
        <id>https://Arron795.github.io/post/psp/</id>
        <link href="https://Arron795.github.io/post/psp/">
        </link>
        <updated>2023-11-06T16:56:29.000Z</updated>
        <content type="html"><![CDATA[<p>有一款软件叫悟饭游戏厅，它是一款专门将各类安卓、PSP、GBA游戏资源进行归类的软件。玩家想玩任何一种可以运行在PSP、GBA等掌机或是Android手机上的经典游戏，只需要在该软件上搜索并下载安装即可。</p>
<p>最近在手机上安装了《侠盗猎车：自由城的故事》（Android版），手机操作并没有很方便，且屏幕较小，游戏体验一般。鉴于之前移植过《罪恶都市传奇》（PSP版），于是尝试着将《自由城的故事》也移植到电脑上。</p>
<h3 id="一-获取游戏的镜像文件">一、获取游戏的镜像文件</h3>
<ol>
<li>下载并安装《悟饭游戏厅》。</li>
<li>将Android手机用数据线连接至PC端，并选择文件传输。（记得打开USB调试模式，可在开发者模式中设置）</li>
<li>在PC端打开我的电脑，进入路径</li>
</ol>
<p><code>“D:/此电脑/your phone's name/内部存储设备/Android\data”</code></p>
<p>找到一个文件夹名为：“com.join.android.app.mgsim.wufun”。</p>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1699289936674.png" alt="" loading="lazy"></figure>
<p>该目录下有两个子目录，一个是“cache”，为空；另一个是“files”。</p>
<p>进入files，找到“wufan91”文件夹，进入。</p>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1699377414814.png" alt="" loading="lazy"></figure>
<p>可以看到，这里有三个命名为数字的文件夹，其中“34”即为《侠盗猎车：自由城的故事》的文件存放位置。（笔者猜测，应是悟饭游戏厅为每个游戏都设定了一个编号）</p>
<p>继续进入到34下的/roms/xdlczycdgs</p>
<p>此时的路径是：<code>&quot;D:\此电脑\your phone's name\内部存储设备\com.join.android.app.mgsim.wufun\files\wufan91\34\roms\xdlczycdgs&quot;</code>。</p>
<p>在此路径下，可以看到一个存储大小为812MB的sdlczycdgs.iso的映像文件。这个文件便是《侠盗猎车：自由城的故事》的安装文件了。将其拷贝至PC端你想存放的路径。</p>
<h3 id="二-下载psp模拟器ppsspp">二、下载PSP模拟器PPSSPP</h3>
<blockquote>
<p>PPSSPP模拟器官网：https://www.ppsspp.org/download/</p>
</blockquote>
<p>进入PPSSPP模拟器官网：<a href="https://www.ppsspp.org/download/">Downloads | PPSSPP</a>，根据你的PC和个人喜好选择对应的安装包，笔者是Windows11系统，选择的是Windows的ZIP文件，如下图。</p>
<figure data-type="image" tabindex="3"><img src="https://Arron795.github.io/post-images/1699376978837.png" alt="" loading="lazy"></figure>
<p>下载并解压到你想存放的路径下，完成后，可看到<code>“ppsspp_win”</code>文件夹，进入，选择PPSSPPWindows.exe或者PPSSPPWindows64.exe任意一个打开，笔者一般选择用64的打开。</p>
<figure data-type="image" tabindex="4"><img src="https://Arron795.github.io/post-images/1699377014737.png" alt="" loading="lazy"></figure>
<p>打开后会看到如下界面：</p>
<figure data-type="image" tabindex="5"><img src="https://Arron795.github.io/post-images/1699377023033.png" alt="" loading="lazy"></figure>
<p><em>若打开后显示全屏，可通过按键盘F11键进行全屏切换，也可以在右边的<code>“游戏设置——图像设置——全屏幕”</code>进行勾选。</em></p>
<h3 id="三-在psp模拟器中选择游戏的iso镜像文件">三、在PSP模拟器中选择游戏的.iso镜像文件</h3>
<p>在PPSSPP界面下，选择<code>载入新游戏</code>，进入到你PC端存放游戏.iso镜像文件的路径下，可以看到如下的游戏图标，点击进入即可进行游戏。</p>
<figure data-type="image" tabindex="6"><img src="https://Arron795.github.io/post-images/1699377034914.png" alt="" loading="lazy"></figure>
<h3 id="四-其他">四、其他</h3>
<h4 id="1-关于psp游戏运行在pc的psp模拟器上没有手柄该如何用操作游戏呢">1、关于PSP游戏运行在PC的PSP模拟器上，没有手柄该如何用操作游戏呢？</h4>
<p>进入<code>游戏设置——控制设置——按键映射</code>，可以通过键盘按键映射PSP的游戏按键进行设置。</p>
<h4 id="2-在pc端进行游戏存档想在手机上载入存档继续游戏该如何操作">2、在PC端进行游戏存档，想在手机上载入存档继续游戏，该如何操作？</h4>
<p>可在PC端进入你解压PSP模拟器的路径，找到<code>memstick</code>目录（记忆棒存储），进入PSP下的<code>SAVEDATA</code>目录，这个是游戏存档存放的目录，可以看到<code>ULJM05255S0</code>（每个游戏的存档文件目录命名不同），完整路径如下：<code>D:\Desktop\ppsspp_win\memstick\PSP\SAVEDATA\ULJM05255S0</code></p>
<figure data-type="image" tabindex="7"><img src="https://Arron795.github.io/post-images/1699377055481.png" alt="" loading="lazy"></figure>
<p>在此目录下，找到DATA.BIN文件和PARAM.SFO文件，将其替换到你的手机对应游戏的存档目录下，如：</p>
<p><code>“D:\此电脑\your phone's name\内部存储设备\Android\data\com.join.android.app.mgsim.wufun\files\PSP\SAVEDATA\ULJM05255S0”</code></p>
<p>（这里解释一下为什么下图的游戏存档目录是ULJM05297S92F0，上面的是ULJM05255S0，因为笔者截下面的图的时候进错目录了，这是《罪恶都市传奇》的存档目录，然而编辑到此处已经拔了数据线了...当然这无关紧要，只要进入同款游戏对应的目录即可。）</p>
<figure data-type="image" tabindex="8"><img src="https://Arron795.github.io/post-images/1699377068404.png" alt="" loading="lazy"></figure>
<p>至此即可完成游戏存档在PC和手机之间的转移。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的第一篇记录。]]></title>
        <id>https://Arron795.github.io/post/firstblog/</id>
        <link href="https://Arron795.github.io/post/firstblog/">
        </link>
        <updated>2023-09-28T11:32:23.000Z</updated>
        <summary type="html"><![CDATA[<pre><code>今天是2023.9.28，中秋节前夕，在大家都开始准备启程回家的日子里，我记录下了我的第一篇blog。
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<pre><code>今天是2023.9.28，中秋节前夕，在大家都开始准备启程回家的日子里，我记录下了我的第一篇blog。
</code></pre>
<!-- more -->
<p>这是我第一次搭建自己的静态网站，在暑期见过我哥的个人网站后，搭建一个属于我自己的网站这个想法便发出萌芽，但一直都没有很心血来潮。再次迸发出这种欲望是上周在做ESP32-Cam连接阿里云物联网平台时，偶然找到一位名叫巧遇的blog，在这位前辈的最后一个blog里出现了Gridea的字样，怀揣走过路过不放过的好奇心理，进入了Gridea的数字花园，于是便有了你现在所看到的这篇文章。</p>
<!-- more -->
<p>没有什么图好放，那就简单插入两张晚餐叭。🙂（听说吃波叔面家的人都很会幸运~）<br>
<img src="https://Arron795.github.io/post-images/1695911822561.jpg" alt="" loading="lazy"></p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1695911841440.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thread 2 “ThreadPool.out“ received signal SIGSEGV, Segmentation fault.关于空指针解引用引起的段错误异常]]></title>
        <id>https://Arron795.github.io/post/threadPoolNullptr/</id>
        <link href="https://Arron795.github.io/post/threadPoolNullptr/">
        </link>
        <updated>2023-07-17T13:39:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题背景">问题背景</h2>
<p>​        最近在学习Linux的多线程和线程池，在调试用C写的一段线程池代码的过程中，出现了一个错误（只截了关键部分）：</p>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1695999552986.png" alt="" loading="lazy"></figure>
<pre><code>Thread 2 &quot;ThreadPool.out&quot; received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7ffff77c2700 (LWP 4298)]
0x00005555555555fa in manager (arg=0x0) at /home/syl/projects/ThreadPool/threadpool.c:246
246        while (!pool-&gt;shutdown)
Segmentation fault
</code></pre>
<p>大意是说在246行的while (!pool-&gt;shutdown)处出现了段错误。（图中是修改过的所以显示250，可忽略）</p>
<p>这里说明一下246行附近写了什么：</p>
<pre><code>void* manager(void* arg)
{
	ThreadPool* pool = (ThreadPool*)arg;
	while (!pool-&gt;shutdown)                    // 246行处
	{
        ...
    }
    return NULL;
}
</code></pre>
<p>首先来了解一下什么是段错误。（懂的可以略过）</p>
<pre><code>段错误（Segmentation Fault），通常简称为&quot;segfault&quot;，是指当程序访问了一个无效的内存地址或者试图对只读内存进行写操作时，操作系统会终止程序的执行并抛出段错误异常。

段错误通常是由以下情况引起的：

1. 空指针解引用：当程序试图对空指针进行解引用操作，即访问空指针指向的内存地址时，会导致段错误。
2. 访问越界：当程序访问了超出分配给它的内存范围的地址或数组的越界索引时，会导致段错误。
3. 写入只读内存：当程序试图向只读内存地址写入数据时，如字符串常量，会导致段错误。
4. 栈溢出：当程序的栈空间超过了系统所允许的最大限制，会导致栈溢出，进而产生段错误。

段错误的发生会导致程序崩溃，可能会导致进程异常终止。它是一种严重的错误，常常表示程序中存在错误的内存访问行为，如指针错误、内存越界等。调试和修复段错误通常需要定位错误发生的位置，并检查程序中的内存操作、指针使用等问题。使用调试工具（如GDB）和良好的编程实践可以帮助发现和修复段错误。
</code></pre>
<hr>
<h2 id="问题解决">问题解决</h2>
<p>经过和原创者的源代码反复对比，发现线程池创建函数 threadPoolCreate，其中创建线程那里有个函数是：</p>
<pre><code>pthread_create (&amp;pool-&gt;managerID, NULL, manager, pool); 
</code></pre>
<p><strong>注意pthread_create这个函数的第四个参数是 pool</strong></p>
<p>而我的代码中写的是：</p>
<pre><code>pthread_create (&amp;pool-&gt;managerID, NULL, manager, NULL); 
</code></pre>
<p>到这里问题的原因就很明显了，我错把第四个参数写成了NULL，这导致了将一个空指针NULL作为参数arg传递给了manager。这相当于245行的</p>
<pre><code>ThreadPool* pool = (ThreadPool*)arg;
</code></pre>
<p>将一个空指针赋给了pool，这样在判断while(!pool-&gt;shutdown)时，当然会出错啦！</p>
<p>出错的原因也很明显，导致段错误的原因是 pool 变量为 NULL 或未初始化，在尝试访问 pool-&gt;shutdown 时会导致无效的内存访问。（空指针解引用引起的段错误）</p>
<p>最后修改完之后重新调试，编译成功！</p>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1695999561226.png" alt="" loading="lazy"></figure>
<hr>
<h2 id="感谢">感谢</h2>
<p>感谢线程池作者爱编程的大丙提供的学习资源。🙂</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ IMX6ULL编译led驱动程序出现fatal error: generated/autoconf.h以及 ERROR: Kernel configuration is invalid.的解决方法]]></title>
        <id>https://Arron795.github.io/post/ledDrive/</id>
        <link href="https://Arron795.github.io/post/ledDrive/">
        </link>
        <updated>2023-06-12T16:53:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题背景">问题背景</h2>
<p>​        最近在学习IMX6ULL的驱动程序，在用make命令执行编译led驱动程序时，出现以下报错：</p>
<pre><code>make -C /home/book/100ask_imx6ull-sdk/Linux-4.9.88 M=pwd modules 
make[1]: 进入目录“/home/book/100ask_imx6ull-sdk/Linux-4.9.88”

  ERROR: Kernel configuration is invalid.
         include/generated/autoconf.h or include/config/auto.conf are missing.
         Run 'make oldconfig &amp;&amp; make prepare' on kernel src to fix it.

  WARNING: Symbol version dump ./Module.symvers
           is missing; modules will have no dependencies and modversions.

  CC [M]  /home/book/01_all_series_quickstart/05_嵌入式Linux驱动开发基础知识/source/02_led_drv/00_led_drv_simple/imx6ull/led_drv.o
In file included from :0:0:
././include/linux/kconfig.h:4:10: fatal error: generated/autoconf.h: 没有那个文件或目录
 #include &lt;generated/autoconf.h&gt;
          ^~~~~~~~~~~~~~~~~~~~~~
compilation terminated.
scripts/Makefile.build:299: recipe for target '/home/book/01_all_series_quickstart/05_嵌入式Linux驱动开发基础知识/source/02_led_drv/00_led_drv_simple/imx6ull/led_drv.o' failed
make[2]: *** [/home/book/01_all_series_quickstart/05_嵌入式Linux驱动开发基础知识/source/02_led_drv/00_led_drv_simple/imx6ull/led_drv.o] Error 1
Makefile:1499: recipe for target 'module/home/book/01_all_series_quickstart/05_嵌入式Linux驱动开发基础知识/source/02_led_drv/00_led_drv_simple/imx6ull' failed
make[1]: *** [module/home/book/01_all_series_quickstart/05_嵌入式Linux驱动开发基础知识/source/02_led_drv/00_led_drv_simple/imx6ull] Error 2
make[1]: 离开目录“/home/book/100ask_imx6ull-sdk/Linux-4.9.88”
Makefile:13: recipe for target 'all' failed
make: *** [all] Error 2
</code></pre>
<pre><code>    很明显，上面出现了两个错误和一个警告：
</code></pre>
<h3 id="错误1">错误1：</h3>
<pre><code>ERROR: Kernel configuration is invalid.
         include/generated/autoconf.h or include/config/auto.conf are missing.
         Run 'make oldconfig &amp;&amp; make prepare' on kernel src to fix it.
</code></pre>
<p>大意是说内核配置无效。缺少include/generated/autoconf.h或include/config/auto.conf文件。</p>
<p>需要特别注意的是，这里报错提示给出了解决建议：在内核源码的目录下运行make oldconfig &amp;&amp; make prepare来修复该报错。</p>
<h3 id="错误2">错误2：</h3>
<pre><code>././include/linux/kconfig.h:4:10: fatal error: generated/autoconf.h: 没有那个文件或目录
 #include &lt;generated/autoconf.h&gt;
          ^~~~~~~~~~~~~~~~~~~~~~
</code></pre>
<p>意思是说，././include/linux/kconfig.h里没有链接generated/autoconf.h文件。</p>
<h3 id="警告">警告：</h3>
<pre><code>  WARNING: Symbol version dump ./Module.symvers
           is missing; modules will have no dependencies and modversions.
</code></pre>
<p>大意是说，Linux内核代码的目录下丢失了符号版本信息文件 Module.symvers文件，将会导致模块没有依赖项和版本信息。</p>
<h2 id="解决过程">解决过程</h2>
<p>​       首要考虑是按报错的建议操作去解决，但是到了Linux的源码目录下执行了make oldconfig，但是它会出现许多需要配置的问答，即使我长按空格按默认答案回答，依然需要很长的时间，在长按了一会儿后，直接Ctrl + C放弃了这个建议。几经周折后，终于找到了一个可行的解决方法。</p>
<h2 id="解决方法">解决方法</h2>
<p>1.首先进入内核源代码目录，执行以下命令：</p>
<pre><code>make mrproper
</code></pre>
<p>​    这个命令会清除先前的编译结果和配置文件。</p>
<p>2.配置内核编译选项和模块，例如执行以下命令：</p>
<pre><code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- 100ask_imx6ull_defconfig
</code></pre>
<p>​    其中，100ask_imx6ull_defconfig是我使用的硬件平台对应的配置文件。如使用其他配置文件，需要根据实际情况修改。</p>
<p>3.生成Makefile文件，例如执行以下命令：</p>
<pre><code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig
</code></pre>
<p>​    make menuconfig这个命令会打开一个文本界面的配置工具，可以在里面配置内核编译选项和模块。配置完成后，保存退出即可。</p>
<p>​    具体操作为</p>
<p>​    （1）、用方向键移动光标至Enalble loadable module support，确保下面的光标在Select处，回车。保证前方的中括号内有*星号。</p>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1695998822495.png" alt="" loading="lazy"></figure>
<p>（ 2）、用方向键左右移动下面的光标至Save处，回车。</p>
<figure data-type="image" tabindex="2"><img src="https://Arron795.github.io/post-images/1695998835833.png" alt="" loading="lazy"></figure>
<p>​    （3）、此页面默认OK，直接回车即可。</p>
<figure data-type="image" tabindex="3"><img src="https://Arron795.github.io/post-images/1695998844596.png" alt="" loading="lazy"></figure>
<p>​    （4）、选中Exit，退出menuconfig</p>
<figure data-type="image" tabindex="4"><img src="https://Arron795.github.io/post-images/1695998851103.png" alt="" loading="lazy"></figure>
<p>​    4. 运行 'make oldconfig &amp;&amp; make prepare' 命令来修复内核配置，执行以下命令：</p>
<pre><code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- oldconfig

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- prepare
</code></pre>
<p>​</p>
<p>​    5.重新编译内核模块，例如执行以下命令：</p>
<pre><code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules -j4
</code></pre>
<p>​</p>
<p>​    6.如果还有模块依赖于 Module.symvers 文件，则需要先编译内核，例如执行以下命令：</p>
<pre><code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage -j4

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules -j4
</code></pre>
<p>注意，在执行make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage -j4命令时，可能会提示：</p>
<pre><code>LZO     arch/arm/boot/compressed/piggy_data
/bin/sh: 1: lzop: not found
arch/arm/boot/compressed/Makefile:186: recipe for target 'arch/arm/boot/compressed/piggy_data' failed
</code></pre>
<p>这是没有安装lzop软件包的缘故，只要执行</p>
<pre><code>sudo apt-get update

sudo apt-get install lzop
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://Arron795.github.io/post-images/1695998863270.png" alt="" loading="lazy"></figure>
<p>然后再次执行make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage -j4即可。</p>
<figure data-type="image" tabindex="6"><img src="https://Arron795.github.io/post-images/1695998874777.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qt中将quint16转换为QByteArray的方法]]></title>
        <id>https://Arron795.github.io/post/qtStringExchanged/</id>
        <link href="https://Arron795.github.io/post/qtStringExchanged/">
        </link>
        <updated>2023-05-21T11:51:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题背景">问题背景</h2>
<p>​        今天在改进用Qt写的TCP服务器和客户端代码时，想将服务器tcpServer的端口号作为数据发送给客户端，并且需要转为Utf8格式。遇到一个问题，调用TcpSocket中的write(const QByteArray &amp;data)方法，write方法的参数列表中需要填入的参数类型是QByteArray，但tcpServer的serverPort()是一个quint16类型。</p>
<pre><code>    问了一下chatGPT，给出的方案是，先将quint转为QTextCodec再转为QByteArray。但我使用的Qt版本是Qt6，已经弃用了QTextCodec。
</code></pre>
<hr>
<h2 id="问题思考和解决方法">问题思考和解决方法</h2>
<p>​        需要解决上述问题，那么就需要将quint16转为QByteArray类型，想法是：首先调用QString的number(int num)方法，将quint16转为QSting，再调用QByteArray的toUtf8()将QString转为QByteArray。</p>
<pre><code>    具体代码：

    quint16 input = this-&gt;tcpServer-&gt;serverPort();
    QString str = QString::number(input);                //一定要用number转化  不然乱码
    QByteArray bytes = str.toUtf8();
</code></pre>
<p>上述代码为了写成一行放在tcpSocket的write方法的参数列表里，改成</p>
<pre><code>QByteArray(QString::number(this-&gt;tcpServer-&gt;serverPort()).toUtf8())
</code></pre>
<p>具体为：</p>
<pre><code>tmpTcpSocket-&gt;write(QByteArray(QString::number(this-&gt;tcpServer-&gt;serverPort()).toUtf8()) + &quot; : &quot; + ui.sendEdit-&gt;text().toUtf8());
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ubuntu18.04意外重启后出现GNU GRUB version 2.02的解决方法]]></title>
        <id>https://Arron795.github.io/post/gnuGrubVersion2.02/</id>
        <link href="https://Arron795.github.io/post/gnuGrubVersion2.02/">
        </link>
        <updated>2023-04-14T11:01:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><strong>该解决方案仅供参考，不保证所有设备都能解决</strong></li>
</ul>
<h2 id="问题背景">问题背景：</h2>
<ul>
<li>通过Windows11使用VM Wave软件开启Ubuntu18.04虚拟机，在设置虚拟网络编辑器和网络适配器连接时，主机意外蓝屏（我电脑老毛病了每次都这样，用的电脑是联想小新13pro 2020版）。</li>
</ul>
<h2 id="问题描述">问题描述：</h2>
<ul>
<li>重启主机后，照旧打开虚拟机，发现进不去图形界面，显示一个标题GNU GRUB version 2.02的界面。</li>
</ul>
<h2 id="解决方案">解决方案：</h2>
<p>接下来需要进入Ubuntu的恢复模式，可以按照以下步骤操作：</p>
<ol>
<li>
<p>在计算机启动时，按住Shift键（我的虚拟机不用按，看具体情况），直到出现Grub引导菜单。</p>
</li>
<li>
<p>在Grub菜单中选择“Advanced options for Ubuntu”或“高级选项”，然后选择Ubuntu内核版本后面的“recovery mode”或“恢复模式”选项。</p>
</li>
<li>
<p>如果需要，输入用户名和密码，进入恢复模式的终端。 在恢复模式中，可以进行一些常见的系统维护操作，如文件系统检查和修复、网络设置、密码重置等。具体的操作步骤和选项可能因Ubuntu版本和配置而异，建议在操作前仔细阅读提示信息和文档。</p>
<p>然后会进入一个界面显示：</p>
</li>
</ol>
<blockquote>
<p>1.520391] piix4_smbus 0000:00:07.3: SMBUS Host Controller not enabled!2.123455] sd 32:0:0:0: [sda] Assuming drive cache: write throughdev/sda1 contains a file system with errors, check forced.dev/sda1:Entry 'job.cache'in /var/cache/cups (538460) has an incorrect filetype (was 1,should be 2). dev/sda1: UNEXPECTED INCONSISTENCY; RUN fSCK MANUALLY.(i.e.,without -a or -p options)fsck exited with status code 4The root filesystem on /dev/sdal requires a manual fsck BusyBox y1.27.2 (Ubuntu 1:1.27.2-2ubuntu3.2) built-in shell (ash)nter help for a list of built-in commands.</p>
<p>（initramfs)</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://Arron795.github.io/post-images/1695997618322.png" alt="" loading="lazy"></figure>
<p>此图用软件翻译过 所以是中文，原文是英文。</p>
<p>这段提示信息表明/dev/sda1分区中的文件系统出现了一些错误，需要进行fsck检查和修复。下面是解决问题的步骤：</p>
<ol>
<li>
<p>在命令提示符（initramfs）下输入“fsck /dev/sda1”命令，对/dev/sda1分区进行检查和修复。如果提示需要输入“y”或“yes”确认，则输入确认。</p>
</li>
<li>
<p>如果fsck检查和修复过程无法自动解决问题，可以尝试使用“fsck /dev/sda1 -y”命令，使用自动模式进行检查和修复。但需要注意的是，自动模式可能会删除部分数据或文件，因此需要谨慎操作。</p>
</li>
<li>
<p>如果上述方法仍无法解决问题，可以尝试使用Ubuntu安装盘或Live CD/USB启动计算机，并进入恢复模式。</p>
</li>
<li>
<p>在恢复模式中，选择“fsck”或“修复文件系统”等选项，进行文件系统的检查和修复。这个过程可能需要一些时间，需要耐心等待。</p>
</li>
<li>
<p>如果文件系统检查和修复无法解决问题，可以尝试重新安装Ubuntu系统，或者使用备份数据恢复系统。 总之，需要根据具体情况采取相应的解决方案。在进行fsck检查和修复时，需要谨慎操作，避免误删数据或文件。建议在操作前备份重要数据。</p>
</li>
</ol>
<p>​	输入完fsck /dev/sda1后显示：</p>
<blockquote>
<p>/dev/sda1: ***** FILE SYSTEM WAS MODIFIED ***** dev/sda1: 183614/1441792 files (0.1% non-contiguous)，2449716/5766656 blocks</p>
<p>(initramfs)</p>
</blockquote>
<ul>
<li>
<p>​	出现“FILE SYSTEM WAS MODIFIED”，说明文件系统已经进行了修复。此时，可以尝试重新启动计算机，看看是否能够正常进入Ubuntu系统。如果能够正常进入系统，建议进行一些常规的系统维护操作，如清理无用文件、更新软件包等，避免类似问题再次出现。 如果重新启动后仍然出现问题，可以尝试进入恢复模式，进行进一步的排查和修复。在恢复模式中，可以进行文件系统的检查和修复、网络设置、密码重置等操作，具体的操作步骤和选项可能因Ubuntu版本和配置而异，建议在操作前仔细阅读提示信息和文档。 总之，在进行任何操作前，需要备份重要数据，以避免数据丢失。</p>
</li>
<li>
<p>此时，只要再输入reboot重启命令进行重启，再次进入GNU GRUB version 2.02界面选择Ubuntu，回车即可。</p>
</li>
<li>
<p>到此，ubuntu已经能正常启动并看到图形界面了，问题解决。</p>
</li>
</ul>
<p><strong>再次声明，本解决方案仅供参考，不保证能解决所有设备上出现的同样问题。</strong></p>
]]></content>
    </entry>
</feed>